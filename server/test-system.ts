import { healthCheck, testConnection } from './database/connection.js'
import { ContactModel } from './models/Contact.js'

async function testSystem() {
  console.log('üß™ Iniciando teste completo do sistema...\n')

  try {
    // Testar conex√£o com banco
    console.log('=== TESTE DE CONEX√ÉO COM BANCO ===')
    const isConnected = await testConnection()

    if (!isConnected) {
      console.error('‚ùå Falha na conex√£o com o banco de dados')
      return
    }

    // Testar health check
    console.log('\n=== TESTE DE HEALTH CHECK ===')
    const health = await healthCheck()
    console.log('üè• Health check result:', health)

    console.log('\n=== TESTE DO MODELO CONTACT ===')

    // Testar cria√ß√£o de contato
    console.log('üìù Testando cria√ß√£o de contato...')
    const newContact = await ContactModel.create({
      name: 'Jo√£o Silva Teste',
      contact: '123456789',
      email: 'joao.teste@email.com',
      picture: 'https://example.com/joao.jpg',
    })
    console.log('‚úÖ Contato criado:', newContact)

    // Testar busca por ID
    console.log('\nüîç Testando busca por ID...')
    const foundContact = await ContactModel.findById(newContact.id!)
    console.log('‚úÖ Contato encontrado:', foundContact)

    // Testar listagem
    console.log('\nüìã Testando listagem de contatos...')
    const allContacts = await ContactModel.findAll()
    console.log(`‚úÖ Total de contatos encontrados: ${allContacts.length}`)

    // Testar busca por nome
    console.log('\nüîç Testando busca por nome...')
    const searchResults = await ContactModel.searchByName('Jo√£o')
    console.log(`‚úÖ Contatos encontrados na busca: ${searchResults.length}`)

    // Testar atualiza√ß√£o
    console.log('\n‚úèÔ∏è Testando atualiza√ß√£o de contato...')
    const updatedContact = await ContactModel.update(newContact.id!, {
      name: 'Jo√£o Silva Atualizado',
    })
    console.log('‚úÖ Contato atualizado:', updatedContact)

    // Testar exclus√£o
    console.log('\nüóëÔ∏è Testando exclus√£o de contato...')
    await ContactModel.delete(newContact.id!)
    console.log('‚úÖ Contato exclu√≠do com sucesso')

    // Verificar se foi realmente exclu√≠do
    try {
      await ContactModel.findById(newContact.id!)
      console.log('‚ùå Erro: contato ainda existe ap√≥s exclus√£o')
    } catch {
      console.log('‚úÖ Confirmado: contato foi exclu√≠do')
    }

    console.log('\nüéâ Todos os testes do sistema passaram com sucesso!')
  } catch (error) {
    console.error('‚ùå Erro durante teste do sistema:', error)
    console.error('Stack trace:', error.stack)
  }
}

// Executar teste se arquivo foi chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testSystem()
    .then(() => {
      console.log('\nüîö Teste finalizado')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Erro fatal:', error)
      process.exit(1)
    })
}

export { testSystem }
